// uma simples implementação de um λ-cálculo sem tipos
// basicamente um avaliador de expressões lambda

// escrito por santi (@o-santi)

// ===================================================
//              Avaliação das expressões             
// ===================================================

// o código a seguir cobre toda a parte de definição dos tokens, avaliação e normalização
// e algumas coisinhas a mais (pretty printing)

Symbol : Type
  String

type Expr {
  var(sym: Symbol),
  app(operator: Expr, operand: Expr)
  lam(sym: Symbol, expr: Expr)
  lett(sym: Symbol, expr: Expr, body: Expr)
}

type Value {
  var(sym: Symbol)
  app(operator: Value, operand: Value)
  lam(sym: Symbol, f: Value -> Reply<Value>)
}

Env : Type
  Map<Value>
// mapa de String -> Value
// guarda nomes de valores

lookup(env: Env, sym:Symbol): Reply<Value>
  case env{sym} as val {
    none: Reply.error!("A variável "| sym | " não foi definida.") // se não achar, saimos da mônade com um erro
    some: Reply.value!(val.value)
  }

freshen(used: List<Symbol>, x: Symbol): Symbol
  if is_in(x, used) then
     freshen(used, x | "_")
  else
    x
// essa solução não é particularmente eficiente, mas não vai mudar tanto assim
// na eficiencia geral do algoritmo


Expr.eval(env: Env, expr: Expr): Reply<Value>
  case expr {
    var:
      lookup(env, expr.sym) // para achar o valor de uma variável, procuramos o valor dela no environment
    lam: 
      let lambda = (u) Expr.eval(env{expr.sym} <- u, expr.expr) // criamos um lambda que representa a computação postergada
      Reply.value!(Value.lam(expr.sym, lambda))                 // para que possamos avaliar somente quando tivermos o valor que queremos substituir
    app:                                                        // essa solução evita ter que procurar todas as ocorrências de uma variável dentro de uma expressão (explicitamente)
      Reply {
        get rator = Expr.eval(env, expr.operator)    // pegamos o valor do operador
        get rand  = Expr.eval(env, expr.operand)     // e do operando
        case rator {                                 // se o operador for um lambda
           lam: rator.f(rand)                        // aplicamos diretamente o operando ao lambda
           app: Reply.value!(Value.app(rator, rand)) // caso contrário, postergamos a avaliação
           var: Reply.value!(Value.app(rator, rand)) // por exemplo, a expressão  ((λx x) x) 
         }                                           // é avaliada diretamente, aplicando o lambda HOAS (representado em kind como rator.f) em x
      }						     // mas a aplicação dentro da expressão (#s (s x))
    lett:					     // é postergada para quando tivermos um valor para s
      Reply {
        get val = Expr.eval(env, expr.expr)    // para avaliar `let id = e in body`
        let new_env = env{expr.sym} <- val     // avaliamos `e` e estendemos o env com a definição id = e
        Expr.eval(new_env, expr.body)          // e avaliamos `body` no novo env
      }
  }

  
Value.quote(used: List<Symbol>, rep_val: Reply<Value>): Reply<Expr>
   case rep_val {
     error: Reply.error!(rep_val.msg) // se recebemos um erro, quebramos tudo devolvendo um erro.
     value:
       let val = rep_val.val  // name alias, só pra facilitar a leitura
       case val {
         var:
           Reply.value!(Expr.var(val.sym)) // para avaliar uma variável, retornamos a expressão de uma variável
         app:
	   Reply {
             get quote_rator = Value.quote(used, Reply.value!(val.operator))
     	     get quote_rand  = Value.quote(used, Reply.value!(val.operand))
  	     return Expr.app(quote_rator, quote_rand)
           }
         lam:
	   Reply {
	     let new_sym = freshen(used, val.sym)
	     get quote_lam = Value.quote(new_sym & used, val.f(Value.var(new_sym)))
             return Expr.lam(new_sym, quote_lam)
	   }
     }
  }

Expr.to_string(expr: Expr): String // pretty printing
  case expr {
    var:
      expr.sym
    app:
      "(" | Expr.to_string(expr.operator) | " " | Expr.to_string(expr.operand) | ")"
    lam:
      "(λ" | expr.sym | " " | Expr.to_string(expr.expr) | ")"
    lett:
      "let " | expr.sym | " = " | Expr.to_string(expr.expr) | " in " | Expr.to_string(expr.body) | "\n"
      // não é utilizado diretamente, já que nenhuma expressão normaliza para let
  }
  
is_in(x: Symbol, list: List<Symbol>): Bool
  case list {
    nil: false
    cons: if String.eql(x, list.head) then true else is_in(x, list.tail)
  }

Expr.normalize(env: Env, expr: Expr): Reply<Expr>
  let v = Expr.eval(env, expr)
  Value.quote(Map.keys!(env), v)

// ===================================================
//              Parsing das expressões             
// ===================================================

// a partir daqui vem a definição do parser, poderia ser feito em outro arquivo
// mas eu não queria ter que lidar com problemas de namespace e tudo mais

Parser.symbol(str: String): Parser<List<Unit>>
  Parser {
    Parser.text(str)
    Parser.spaces
  }

Expr.parser: Parser<Expr>
  Parser.choice!([
    Expr.parser.let
    Expr.parser.lam
    Expr.parser.app
  ])

Expr.parser.name: Parser<String>
  Parser {
    get name = Kind.Parser.name1
    if String.eql(name, "let") || String.eql(name, "in") then
       Parser.fail!("Avoided.")
    else
      Parser.spaces
      return name
  }

Expr.parser.var: Parser<Expr>
  Parser {
    get name = Expr.parser.name
    return Expr.var(name) // fmap?
  }

Expr.parser.lam: Parser<Expr>        
  Parser {
    Parser.choice!([Parser.text("λ"), Parser.text("#")])
    // inclusivo com aqueles que não tem teclado unicode
    get var  = Expr.parser.name
    get body = Expr.parser
    return Expr.lam(var, body)
  }

Expr.parser.app: Parser<Expr>
  Parser {
    get first = Expr.parser.atom
    get names = Parser.many!(Expr.parser.atom)
    return weird_foldl!(Expr.app, first, names)
  }

weird_foldl<A:Type>(f: A -> A -> A, z: A, list: List<A>): A
  case list {
    nil : z
    cons: weird_foldl<A>(f, f(z, list.head), list.tail)
  }
// eu não sei exatamente como fazer isso com o foldl ou foldr normais
// (eu tava tendo um erro com a ordem das aplicações)
// então decidi implementar o meu próprio fold para tal.

Expr.parser.atom: Parser<Expr>
  Parser.choice!([
    Expr.parser.var,
    Parser {
      Parser.symbol("(")
      get expr = Expr.parser
      Parser.symbol(")")
      return expr
    }])

Expr.parser.let: Parser<Expr>
  Parser {
    Parser.symbol("let")
    get name = Expr.parser.name
    Parser.symbol("=")
    get expr = Expr.parser
    Parser.symbol("in")
    get body = Expr.parser
    return Expr.lett(name, expr, body)
  }

lang_parser: Parser<Expr>
  Parser {
    Parser.spaces
    get expr = Expr.parser
    Parser.eof
    return expr
  }

run_or_error(code: String): IO<Unit>
  let env = Map.new<Value>
  let code_state = Parser.State.from_code(code)
  case lang_parser(code_state) as parsed {
    error: IO {
      open parsed.err
      IO.print(parsed.err.msg | "\n" | String.slice(parsed.err.ini, parsed.err.idx, code))
    }
    value:
     let expr = Expr.normalize(env, parsed.val)
     case expr {
        error: IO.print(expr.msg)
        value: IO.print(Expr.to_string(expr.val))
      }
  }

untyped: IO<Unit>
  let code = "
  let succ = #pred #f #x f (pred f x) in
  let zero = #f #x x in

  let sum  = #k #j #f #x (k f) (j f x) in
  let mul  = #k #j #f #x (k (j f)) x in
 
  succ zero
  "
  run_or_error(code)
